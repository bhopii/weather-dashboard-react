{"version":3,"sources":["components/Header.js","components/SearchBox.js","utils/API.js","components/CurrentWeather.js","components/DailyForecast.js","components/WeatherForecast.js","components/CityList.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","SearchBox","Grid","container","direction","alignItems","item","xs","type","name","value","cityName","onChange","handleChange","style","fontSize","onClick","handleSearch","API","getCities","axios","get","addCity","city","put","getWeatherData","getFormattedDate","epochDate","date","Date","getMonth","getDate","getFullYear","CurrentWeather","uvStyle","current","Object","keys","length","console","log","uvi","backgroundColor","color","width","dt","temp","humidity","wind_speed","DailyForecast","src","icon","alt","tempMin","tempMAx","WeatherForecast","forecasts","slice","map","dayForecast","index","weather","tempMax","max","min","CityList","cityList","handleCityClick","i","App","useState","setCityName","setCityList","currentWeather","setCurrentWeather","forecast","setForecast","searchWeatherData","then","resp","data","daily","resAdd","useEffect","res","event","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f09fcce0.chunk.js","sourcesContent":["import \"./components.css\";\r\nconst Header = (props) => {\r\n\r\n    return(\r\n        <div className=\"tc fs-normal fl w-100 header-div\">\r\n            <h1>Weather Dashboard</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","\r\nimport PageviewIcon from \"@material-ui/icons/Pageview\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"./components.css\";\r\n\r\nconst SearchBox = (props) => {\r\n  return (\r\n    <div className=\"srchBox\">\r\n      <Grid container direction=\"row\" alignItems=\"center\">\r\n        <Grid item xs>\r\n          <input type=\"text\" name=\"cityName\" value={props.cityName} onChange={props.handleChange}/>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <PageviewIcon style={{ fontSize: 40 }} onClick={props.handleSearch}/>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import axios from \"axios\";\r\n\r\nconst API = {\r\n  getCities: function () {\r\n    return axios.get(\"https://secret-headland-90216.herokuapp.com/api/cities\");\r\n  },\r\n\r\n  addCity: function (city) {\r\n    return axios.put(`https://secret-headland-90216.herokuapp.com/api/cities/${city}`);\r\n  },\r\n\r\n  getWeatherData: function (cityName) {\r\n    return axios.get(`https://secret-headland-90216.herokuapp.com/api/weather/${cityName}`);\r\n  },\r\n\r\n  getFormattedDate: function (epochDate) {\r\n    let date = new Date(epochDate * 1000);\r\n    return (\r\n      date.getMonth() + 1 + \"/\" + date.getDate() + \"/\" + date.getFullYear()\r\n    );\r\n  },\r\n};\r\n\r\nexport default API;\r\n","import \"./components.css\";\r\nimport API from \"../utils/API\";\r\n\r\nconst CurrentWeather = ({ current }) => {\r\n  if (!current && Object.keys(current).length <= 0) {\r\n    return null;\r\n  }\r\n  console.log(current);\r\n  let uvStyle;\r\n  if (current.uvi <= 2) {\r\n    uvStyle = { backgroundColor: \"green\", color: \"white\", width: \"20px\" };\r\n  } else if ((current.uvi >= 3) & (current.uvi <= 5)) {\r\n    uvStyle = { backgroundColor: \"yellow\", color: \"white\" };\r\n  } else if ((current.uvi >= 6) & (current.uvi <= 7)) {\r\n    uvStyle = { backgroundColor: \"orange\", color: \"white\" };\r\n  } else if ((current.uvi >= 8) & (current.uvi <= 10)) {\r\n    uvStyle = { backgroundColor: \"red\", color: \"white\" };\r\n  } else {\r\n    uvStyle = { backgroundColor: \"violet\", color: \"white\" };\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        current\r\n          ? \"show currentWeather shadow-5 container-fluid bg-white\"\r\n          : \"hide\"\r\n      }\r\n    >\r\n      <h1>\r\n        {current.city} ({API.getFormattedDate(current.dt)}){\" \"}\r\n        <span>\r\n          {/* <img\r\n            src={\r\n              \"http://openweathermap.org/img/wn/\" +\r\n              current.weather[0].icon +\r\n              \"@2x.png\"\r\n            }\r\n            alt=\"icon\"\r\n          /> */}\r\n        </span>\r\n      </h1>\r\n      <p>\r\n        <b>Temperature:</b> {current.temp} °F\r\n      </p>\r\n      <p>\r\n        <b>Humidity:</b> {current.humidity}%\r\n      </p>\r\n      <p>\r\n        <b>Wind Speed:</b> {current.wind_speed} MPH\r\n      </p>\r\n      <p>\r\n        <b>UV Index:</b> <span style={uvStyle}>{current.uvi}</span>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentWeather;\r\n","const DailyForecast = (props) => {\r\n  return (\r\n    <div className=\"tc bg-blue dib br3 pa4 ma1 grow bw2 shadow-5 white\">\r\n      <div>\r\n        <h3>{props.date}</h3>\r\n        <img src={\"http://openweathermap.org/img/wn/\" + props.icon + \"@2x.png\"} alt=\"icon\"/>\r\n        <p>Min Temp: {props.tempMin} °F</p>\r\n        <p>Max Temp: {props.tempMAx} °F</p>\r\n        <p>Humidity: {props.humidity} %</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyForecast;\r\n","import DailyForecast from \"./DailyForecast\";\r\nimport API from \"../utils/API\";\r\nimport \"./components.css\";\r\n\r\nconst WeatherForecast = ({ forecasts }) => {\r\n  return (\r\n    <div className=\"movers-row\">\r\n      {forecasts.slice(0,5).map((dayForecast, index) => {\r\n        return <DailyForecast \r\n            date = {API.getFormattedDate(dayForecast.dt)}\r\n            icon = {dayForecast.weather[0].icon}\r\n            tempMax = {dayForecast.temp.max}\r\n            tempMin = {dayForecast.temp.min}\r\n            humidity = {dayForecast.humidity}\r\n            key = {index}\r\n        />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WeatherForecast;\r\n","import \"./components.css\";\r\nconst CityList = ({ cityList, handleCityClick }) => {\r\n  return (\r\n    <div>\r\n      \r\n      {cityList.map((city, i) => {\r\n        return (\r\n          <div key={i} onClick={(() => {handleCityClick(city)})} className=\"tl bg-light-gray br3 pa1 ma2 shadow-5 dark-blue grow citydiv\">\r\n            <p>{city}</p>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CityList;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport Header from \"../components/Header\";\nimport SearchBox from \"../components/SearchBox\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport WeatherForecast from \"../components/WeatherForecast\";\nimport CityList from \"../components/CityList\";\nimport API from \"../utils/API\";\n\nfunction App() {\n  const [cityName, setCityName] = useState(\"Atlanta\");\n  const [cityList, setCityList] = useState([]);\n  const [currentWeather, setCurrentWeather] = useState({});\n  const [forecast, setForecast] = useState([]);\n\n  const handleCityChange = (event) => {\n    setCityName(event.target.value);\n  };\n\n  const searchWeatherData = (city) => {\n    console.log(\"Searching for city\", city);\n    API.getWeatherData(city)\n      .then((resp) => {\n        let { current, daily } = resp.data;\n        setCurrentWeather(current);\n        setForecast(daily);\n        API.addCity(city).then(resAdd => {\n          setCityList([...cityList, city]);\n        })\n      });\n  };\n\n  const handleCityClick = (cityName) => {\n    console.log(cityName);\n    searchWeatherData(cityName);\n  }\n\n  useEffect(() => {\n    API.getCities().then((res) => {\n      setCityList(res.data);\n    });\n\n    API.getWeatherData(cityName)\n      .then((resp) => {\n        let { current, daily } = resp.data;\n        setCurrentWeather(current);\n        setForecast(daily);\n      });\n  }, []);\n\n  const handleCitySearch = (event) => {\n    searchWeatherData(cityName);\n  };\n\n  return (\n    <div>\n      <Header />\n      <div className=\"left-sections\">\n        <SearchBox\n          cityName={cityName}\n          handleChange={handleCityChange}\n          handleSearch={handleCitySearch}\n        />\n        <CityList cityList={cityList} handleCityClick={handleCityClick}/>\n      </div>\n      <div className=\"right-sections\">\n        <CurrentWeather current={currentWeather} />\n        <WeatherForecast forecasts={forecast} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}